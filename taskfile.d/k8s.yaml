version: '3'

tasks:

  anteon:deploy:self:
    cmds:
      - helm repo add anteon https://getanteon.github.io/anteon-helm-charts/
      - helm repo update
      # Anteon platform
      - >
        helm upgrade --install
        anteon-selfhosted anteon/anteon
        --namespace anteon --create-namespace
        --wait

  anteon:deploy:alaz:
    requires:
      vars: [MONITORING_ID]
    cmds:
      - helm repo add anteon https://getanteon.github.io/anteon-helm-charts/
      - helm repo update
      # eBPF agent (Alaz)
      - >
        helm upgrade --install
        alaz anteon/alaz
        --namespace anteon --create-namespace
        --set monitoringID={{.MONITORING_ID}}

  argocd:deploy:self:helm:
    desc: 'Deploy ArgoCD controllers to cluster [CONTEXT]'
    vars:
      _CONTEXT: '{{if .CONTEXT}}--kube-context {{.CONTEXT}}{{end}}'
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update
      - helm upgrade --install argocd argo/argo-cd --namespace argocd --create-namespace {{._CONTEXT}}

  argocd:deploy:self:kubectl:
    desc: 'Deploy ArgoCD controllers without HA to cluster [CONTEXT]'
    vars:
      _CONTEXT: '{{if .CONTEXT}}--context {{.CONTEXT}}{{end}}'
    cmds:
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml {{._CONTEXT}}

  argocd:admin:get-initial-password:
    desc: 'Print initial admin password i.e. secret "argocd-initial-admin-secret" base64 encoded'
    cmds:
      - argocd admin initial-password -n argocd

  argocd:admin:passwd:
    desc: 'Change admin password'
    cmds:
      - argocd account update-password

  carina:deploy:self:
    vars:
      _VERSION: 'v0.11.0'
    cmds:
      - helm repo add carina-csi-driver https://carina-io.github.io
      - helm repo update
      - >
        helm upgrade --install
        carina-csi-driver carina-csi-driver/carina-csi-driver
        --version {{._VERSION}}
        --namespace kube-system --create-namespace

  cert-manager:deploy:self:
    vars:
      _VERSION: '{{if .VERSION}}{{.VERSION}}{{else}}v1.15.3{{end}}'
    cmds:
      - helm repo add jetstack https://charts.jetstack.io --force-update
      - helm repo update
      - >
        helm upgrade --install
        cert-manager jetstack/cert-manager
        --version {{._VERSION}}
        --namespace cert-manager --create-namespace
        --set crds.enabled=true
        --set "extraArgs={--enable-gateway-api}"

  cnpg:deploy:self:
    cmds:
      - helm repo add cnpg https://cloudnative-pg.github.io/charts
      - helm repo update
      - helm upgrade --install cnpg cnpg/cloudnative-pg --namespace cnpg-system --create-namespace

  cnpg:deploy:pg:
    desc: Create a CNPG database cluster [NAME NAMESPACE] -- [extra_args]
    vars:
      NS: '{{if .NAMESPACE}}{{.NAMESPACE}}{{else}}cnpg-database{{end}}'
      RELEASE: '{{if .NAME}}{{.NAME}}{{else}}database{{end}}'
    cmds:
      - helm repo add cnpg https://cloudnative-pg.github.io/charts
      - helm repo update
      - helm upgrade --install {{.RELEASE}} cnpg/cluster --namespace {{.NS}} --create-namespace {{.CLI_ARGS}}

  csi:s3:deploy:self:
    cmds:
      - helm repo add yandex-s3 https://yandex-cloud.github.io/k8s-csi-s3/charts
      - helm repo update
      - >
        helm upgrade --install
        csi-s3 yandex-s3/csi-s3

  eg:deploy:self:
    desc: 'Deploy Envoy Gateway that supports gwapi v1.1.0'
    cmds:
      - >
        helm upgrade --install
        eg oci://docker.io/envoyproxy/gateway-helm
        --version v1.1.2
        --namespace envoy-gateway-system --create-namespace
      - >
        kubectl wait
        --timeout=5m
        --namespace envoy-gateway-system
        deployment/envoy-gateway
        --for=condition=Available

  fission:deploy:self:
    vars:
      _VERSION: 'v1.20.4'
      _NAMESPACE: fission
    cmds:
      - kubectl create namespace {{._NAMESPACE}}
      - kubectl create -k "github.com/fission/fission/crds/v1?ref={{._VERSION}}"
      - helm repo add fission-charts https://fission.github.io/fission-charts/
      - helm repo update
      - >
        helm upgrade --install
        fission fission-charts/fission-all
        --version {{._VERSION}}
        --namespace {{._NAMESPACE}} --create-namespace

  flux:deploy:self:
    desc: 'Deploy Flux CD controllers to cluster [CONTEXT]'
    preconditions:
      - flux check --pre
    vars:
      _CONTEXT: '{{if .CONTEXT}}--context {{.CONTEXT}}{{end}}'
    cmds:
      - flux install {{._CONTEXT}}

  flux:deploy:community:
    desc: 'Deploy Flux CD controllers to cluster [NAME CONTEXT]'
    preconditions:
      - helm version
      - flux check --pre
    vars:
      _NAME: '{{if .NAME}}{{.NAME}}{{else}}flux{{end}}'
      _CONTEXT: '{{if .CONTEXT}}--kube-context {{.CONTEXT}}{{end}}'
    cmds:
      - helm repo add fluxcd-community https://fluxcd-community.github.io/helm-charts
      - >
        helm upgrade --install
        {{._CONTEXT}}
        --namespace flux-system --create-namespace
        {{._NAME}} fluxcd-community/flux2
      - flux check

  gwapi:install:v1.1.0:
    cmds:
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml

  helm:repo:add:
    desc: 'Add a repo <REPO>'
    internal: true
    requires: {vars: [REPO]}
    cmds:
      - cmd: 'helm repo add {{.REPO}}'

  helm:repo:add:bulk:
    desc: 'Add repos <REPOS>'
    internal: true
    requires: {var: [REPOS]}
    cmds:
      - task: 'helm:repo:add'
        vars: {REPO: '{{.REPO}}'}
        for: {var: REPOS, as: REPO}
      - cmd: helm repo update

  helm:repo:add:curated-list:
    desc: 'Import repos'
    cmds:
      - task: 'helm:repo:add:bulk'
        vars:
          REPOS:
            - anteon https://getanteon.github.io/anteon-helm-charts/
            - argo https://argoproj.github.io/argo-helm
            - authentik https://charts.goauthentik.io
            - bitnami https://charts.bitnami.com/bitnami
            - cnpg https://cloudnative-pg.github.io/charts/
            - datawire https://app.getambassador.io
            - fission-charts https://fission.github.io/fission-charts/
            - fluxcd https://charts.fluxcd.io
            - fluxcd-community https://fluxcd-community.github.io/helm-charts
            - istio https://istio-release.storage.googleapis.com/charts
            - jetstack https://charts.jetstack.io
            - kanister https://charts.kanister.io/
            - kong https://charts.konghq.com
            - kubeshark https://helm.kubeshark.co
            - longhorn https://charts.longhorn.io
            - traefik https://traefik.github.io/charts
            - openebs https://openebs.github.io/openebs
            - openfaas https://openfaas.github.io/faas-netes/
            - prometheus-community https://prometheus-community.github.io/helm-charts
            - vmware-tanzu https://vmware-tanzu.github.io/helm-charts

  hwameistor:deploy:self:
    cmds:
      - helm repo add hwameistor-operator https://hwameistor.io/hwameistor-operator
      - helm repo update
      - >
        helm upgrade --install
        hwameistor-operator hwameistor-operator/hwameistor-operator
        --namespace hwameistor --create-namespace
        {{.CLI_ARGS}}

  istio:deploy:self:
    cmds:
      # - istioctl install --set profile=ambient --skip-confirmation
      - istioctl install --set profile=default --skip-confirmation
      - istioctl verify-install

  istio:deploy:self:helm:default:
    cmds:
      # Install the control plane
      - helm repo add istio https://istio-release.storage.googleapis.com/charts
      - helm repo update
      - helm upgrade --install -n istio-system --create-namespace istio-base istio/base --wait
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml
      - helm upgrade --install -n istio-system istiod istio/istiod --wait
      # Install the data plane
      - helm upgrade --install -n istio-ingress --create-namespace istio-ingress istio/gateway --wait

  istio:deploy:self:helm:minimal:
    cmds:
      # Install the control plane
      - helm repo add istio https://istio-release.storage.googleapis.com/charts
      - helm repo update
      - helm upgrade --install -n istio-system istiod istio/istiod --wait
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml

  istio:deploy:self:helm:ambient:
    cmds:
      # Install the control plane
      - helm repo add istio https://istio-release.storage.googleapis.com/charts
      - helm repo update
      - helm upgrade --install -n istio-system --create-namespace istio-base istio/base --wait
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml
      - helm upgrade --install -n istio-system istiod istio/istiod --set profile=ambient --wait
      - helm upgrade --install -n kube-system istio-cni istio/cni -n kube-system
      # Install the data plane
      - helm upgrade --install ztunnel istio/ztunnel --wait
      # - helm upgrade --install -n istio-ingress --create-namespace istio-ingress istio/gateway --wait
      # - helm upgrade --install -n istio-system istio-egress istio/egressgateway

  juicefs:csi:deploy:self:
    cmds:
      - helm repo add juicefs https://juicedata.github.io/charts/
      - helm repo update
      - >
        helm upgrade --install
        juicefs-csi-driver juicefs/juicefs-csi-driver
        --namespace kube-system --create-namespace
        {{.CLI_ARGS}}

  kadalu:deploy:self:
    vars:
      _VERSION: '1.3.0'
    cmds:
      - >
        helm upgrade --install
        kadalu https://github.com/kadalu/kadalu/releases/download/1.3.0/kadalu-helm-chart.tgz
        --namespace kadalu --create-namespace
        --set kubernetesDistro=kubernetes
        --set operator.enabled=true
        {{.CLI_ARGS}}

  kanister:deploy:self:
    cmds:
      - helm repo add kanister https://charts.kanister.io/
      - helm repo update
      - >
        helm upgrade --install
        kanister kanister/kanister-operator
        --namespace kanister --create-namespace

  k3sup-init-master:
    desc: 'Initial k3s cluster via SSH [SSH_HOST SSH_PORT SSH_USER SSH_KEY IS_EMBEDDED_ETCD IS_MERGE_EXISTING]'
    cmds:
      - cmd: >
          k3sup install
          {{if not .IS_EMBEDDED_ETCD}} {{else}} --cluster {{end}}
          {{if not .IS_MERGE_EXISTING}} {{else}} --merge {{end}}
          --host {{if .SSH_HOST}} {{.SSH_HOST}} {{else}} 127.0.0.1 {{end}}
          --ssh-port {{if .SSH_PORT}} {{.SSH_PORT}} {{else}} 22 {{end}}
          --user {{if .SSH_USER}} {{.SSH_USER}} {{else}} {{.USER}} {{end}}
          {{if .SSH_KEY}} --ssh-key {{.SSH_KEY}} {{end}}
          --k3s-channel stable

  k3sup-join-worker:
    desc: 'Join a k3s cluster via SSH <SSH_HOST SSH_USER MASTER_SSH_HOST MASTER_SSH_PORT>'
    cmds:
      - cmd: >
          k3sup join
          --server
          --host {{.SSH_HOST}}
          --user {{.SSH_USER}}
          --server-host {{.MASTER_SSH_HOST}}
          --server-user {{.MASTER_SSH_PORT}}
          --k3s-channel stable

  krew:install:plugin:
    desc: 'Install a kubectl plugin [PLUGIN] -- [plugin]'
    vars:
      _PLUGIN: '{{if .PLUGIN}}{{.PLUGIN}}{{else if .CLI_ARGS}}{{.CLI_ARGS}}{{else}}--help{{end}}'
    cmds:
      - kubectl krew install {{._PLUGIN}}

  krew:install:plugins:
    internal: true
    requires:
      vars: [PLUGINS]
    cmds:
      - task: krew:install:plugin
        vars:
          PLUGIN: '{{.PLUGIN}}'
        for: {var: PLUGINS, as: PLUGIN}

  krew:install:plugin:curated-list:
    desc: 'Install recommended plugins'
    cmds:
      - task: krew:install:plugins
        vars:
          PLUGINS:
            - access-matrix
            - cert-manager
            - cilium
            - cnpg
            - cost
            - explore
            - flame
            - kc
            - tree

  krew:install:plugin:curated-list:unix:
    platforms: [linux, darwin]
    desc: 'Install recommended plugins'
    cmds:
      - task: krew:install:plugins
        vars:
          PLUGINS:
            - ctx
            - ns
            - node-shell

  kube-vip:deploy:self:
    desc: 'Deploy kube-vip'
    cmds:
      - kubectl apply -f https://kube-vip.io/manifests/rbac.yaml
      - 'echo "TODO: DaemonSet"'
      - echo "To simplify, is is recommended to use loadBalancer to replace kube-vip"
      - echo "k3d comes with HA implemented by Nginx"
 
  longhorn:install:self:helm:
    desc: 'Deploy longhorn'
    vars:
      _VERSION: '1.7.1'
      _NAMESPACE: 'longhorn-system'
      _RELEASE: 'longhorn'
    cmds:
      - helm repo add longhorn https://charts.longhorn.io
      - helm repo update
      - >
        helm upgrade --install
        {{._RELEASE}} longhorn/longhorn
        --namespace {{._NAMESPACE}} --create-namespace
        --version {{._VERSION}}

  openfaas:deploy:self:
    cmds:
      - kubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml
      - helm repo add openfaas https://openfaas.github.io/faas-netes/
      - helm repo update
      - >
        helm upgrade --install
        openfaas openfaas/openfaas
        --namespace openfaas --create-namespace

  prometheus:deploy:community:cnpg:
    cmds:
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - >
        helm upgrade --install
        prometheus-community prometheus-community/kube-prometheus-stack
        --values https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml

  rainbond:deploy:self:k3s:
    cmds:
      - helm repo add rainbond https://openchart.goodrain.com/goodrain/rainbond
      - helm repo update
      - >
        helm upgrade --install
        rainbond rainbond/rainbond-cluster
        -n rbd-system --create-namespace
        --set useK3sContainerd=true

  traefik:deploy:self:
    desc: 'Deploy traefik [RELEASE VERSION CRD INGRESS GWAPI] -- [options]'
    vars:
      _RELEASE: 'traefik'
      _VERSION: '32.0.0'
      _NAMESPACE: '--namespace {{if .NAMESPACE}}{{.NAMESPACE}}{{else}}traefik{{end}} --create-namespace'
      _DAEMONSET: '{{if ne .DAEMONSET "false"}}--set deployment.kind=DaemonSet{{end}}'
      _CRD: '{{if eq .CRD "false"}}--set providers.kubernetesCRD.enabled=false{{end}}'
      _INGRESS: '{{if eq .INGRESS "false"}}--set providers.kubernetesIngress.enabled=false{{end}}'
      _GWAPI: '{{if ne .GWAPI "false"}}--set providers.kubernetesGateway.enabled=true{{end}}'
    cmds:
        # --set metrics.prometheus.enabled=true
        # --set metrics.prometheus.prometheusRule.enabled=true
        # --set metrics.prometheus.service.enabled=true
      - helm repo add traefik https://traefik.github.io/charts
      - helm repo update
      - >
        helm upgrade --install
        {{._RELEASE}} traefik/traefik --version {{._VERSION}}
        {{._NAMESPACE}}
        --set ingressRoute.dashboard.enabled=true
        {{._DAEMONSET}}
        {{._CRD}}
        {{._INGRESS}}
        {{._GWAPI}}
        {{if .CLI_ARGS}}{{.CLI_ARGS}}{{end}}

  tsuru:deploy:self:
    cmds:
      - helm repo add tsuru https://tsuru.github.io/charts
      - helm repo update
      - >
        helm upgrade --install
        tsuru tsuru/tsuru-stack
        --create-namespace --namespace tsuru-system
        --set ingress-nginx.enabled=false
        --set tsuru-api.service.type=ClusterIP

  velero:deploy:self:
    desc: 'Deploy velero 1.14.1'
    cmds:
      - helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
      - helm repo update
      - >
        helm upgrade --install
        velero vmware-tanzu/velero
        --version 7.2.1
        {{.CLI_ARGS}}
